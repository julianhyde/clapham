/*
// $Id$
// Clapham generates railroad diagrams to represent computer language grammars.
// Copyright (C) 2008-2009 Julian Hyde
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
*/
options {
    STATIC = false;
    UNICODE_INPUT = true;
    IGNORE_CASE = true;
}

PARSER_BEGIN(WirthParser)

package net.hydromatic.clapham.parser.wirth;

import java.util.*;
import net.hydromatic.clapham.parser.*;

/**
 * Parser for grammars in Wirth Syntax Notation.
 *
 * <p><a href="http://en.wikipedia.org/wiki/Wirth_syntax_notation">Wirth Syntax
 * Notation</a> (WSN) is an alternative to Backus-Naur Form.
 *
 * @author Julian Hyde
 * @version $Id$
 */
public class WirthParser
{
    public static <E extends EbnfNode> void toString(
        StringBuilder buf, String start, List<E> list, String end)
    {
        int i = 0;
        buf.append(start);
        for (E node : list) {
            if (i++ > 0) {
                buf.append(", ");
            }
            node.toString(buf);
        }
        buf.append(end);
    }
}

PARSER_END(WirthParser)

/*
Example:

Wirth's BNF:

SYNTAX     = { PRODUCTION } .
PRODUCTION = IDENTIFIER "=" EXPRESSION "." .
EXPRESSION = TERM { "|" TERM } .
TERM       = FACTOR { FACTOR } .
FACTOR     = IDENTIFIER
           | LITERAL
           | "[" EXPRESSION "]"
           | "(" EXPRESSION ")"
           | "{" EXPRESSION "}" .
IDENTIFIER = letter { letter } .
LITERAL    = """" character { character } """" .
*/

/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

// SYNTAX     = { PRODUCTION } .
List<ProductionNode> Syntax() :
{
    List<ProductionNode> list = new ArrayList<ProductionNode>();
    ProductionNode p;
}
{
    (
        p = Production()
        {
            list.add(p);
        }
    )*
    {
        return list;
    }
}

// PRODUCTION = IDENTIFIER "=" EXPRESSION "." .
ProductionNode Production() :
{
    IdentifierNode id;
    EbnfNode expression;
}
{
    id = Identifier()
    <EQ>
    expression = Expression()
    <DOT>
    {
        return new ProductionNode(id, expression);
    }
}

// EXPRESSION = TERM { "|" TERM } .
EbnfNode Expression() :
{
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
}
{
    n = Term()
    {
        list.add(n);
    }
    (
        <BAR>
        n = Term()
        {
            list.add(n);
        }
    )*
    {
        if (list.size() == 1) {
            return list.get(0);
        } else {
            return new AlternateNode(list);
        }
    }
}

// TERM       = FACTOR { FACTOR } .
EbnfNode Term() :
{
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
}
{
    n = Factor()
    {
        list.add(n);
    }
    (
        n = Factor()
        {
            list.add(n);
        }
    )*
    {
        if (list.size() == 1) {
            return list.get(0);
        } else {
            return new SequenceNode(list);
        }
    }
}

// FACTOR     = IDENTIFIER
//            | LITERAL
//            | "[" EXPRESSION "]"
//            | "(" EXPRESSION ")"
//            | "{" EXPRESSION "}" .
EbnfNode Factor() :
{
    EbnfNode n;
}
{
    (
        n = Identifier()
    |
        n = Literal()
    |
        <LBRACKET>
        n = Expression()
        <RBRACKET>
        {
            n = new OptionNode(n);
        }
    |
        <LPAREN>
        n = Expression()
        <RPAREN>
    |
        <LBRACE>
        n = Expression()
        <RBRACE>
        {
            n = new RepeatNode(n);
        }
    )
    {
        return n;
    }
}

// IDENTIFIER = letter { letter } .
IdentifierNode Identifier() :
{
    String s;
}
{
    s = <IDENTIFIER>.image
    {
        return new IdentifierNode(s);
    }
}

// LITERAL    = """" character { character } """" .
LiteralNode Literal() :
{
    String s;
}
{
    s = <LITERAL>.image
    {
        assert s.startsWith("\"") && s.endsWith("\"") : s;
        return new LiteralNode(s.substring(1, s.length() - 1));
    }
}

TOKEN :
{
    < LITERAL: <QUOT> ((<QUOT> <QUOT>) | (~["\""]))* <QUOT> >
}

TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |
    < #LETTER:
    [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
    ]
    >
    |
    < #DIGIT:
    [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
    ]
    >
}

TOKEN :
{
    < LPAREN: "(">
    | < RPAREN: ")">
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < DOT: "." >
    | < EQ: "=" >
    | < BAR: "|" >
    | < QUOT: "\"" >
}

SKIP :
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

// End WirthParser.jj
