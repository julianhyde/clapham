/*
// $Id$
// Clapham generates railroad diagrams to represent computer language grammars.
// Copyright (C) 2008-2009 Julian Hyde
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version approved by The Eigenbase Project.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
options {
    STATIC = false;
    UNICODE_INPUT = true;
    IGNORE_CASE = true;
}

PARSER_BEGIN(BnfParser)

package net.hydromatic.clapham.parser.bnf;

import java.util.*;
import net.hydromatic.clapham.parser.*;

/**
 * Parser for grammars in Backus-Naur Form (BNF) notation.
 *
 * <p>The supported grammar is
 * <a href="http://en.wikipedia.org/wiki/Backus–Naur_form">Backus-Naur Form</a>,
 * extended with '*' (closure operator), '+' (mandatory repetition), but is not
 * the grammar officially known as 'Extended Backus-Naur Form' (EBNF).
 *
 * @author Julian Hyde
 * @version $Id$
 */
public class BnfParser
{
    public static <E extends EbnfNode> void toString(
        StringBuilder buf, String start, List<E> list, String end)
    {
        int i = 0;
        buf.append(start);
        for (E node : list) {
            if (i++ > 0) {
                buf.append(", ");
            }
            node.toString(buf);
        }
        buf.append(end);
    }
}

PARSER_END(BnfParser)

/*
Example:

Wirth's BNF, expressed in JavaCC-like BNF:

SYNTAX     ::= ( PRODUCTION )*
PRODUCTION ::= IDENTIFIER "::=" EXPRESSION "." <eol>
EXPRESSION ::= TERM ( "|" TERM )*
TERM       ::= FACTOR+
FACTOR     ::= IDENTIFIER
           | LITERAL
           | "[" EXPRESSION "]"
           | "(" EXPRESSION ")"
           | "{" EXPRESSION "}"
IDENTIFIER ::= <letter>+
LITERAL    ::= """" <character>+ """"

*/

/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

// SYNTAX ::= PRODUCTION*
List<ProductionNode> Syntax() :
{
    List<ProductionNode> list = new ArrayList<ProductionNode>();
    ProductionNode p;
}
{
    (
        LOOKAHEAD(4)
        p = Production()
        {
            list.add(p);
        }
    )*
    <EOF>
    {
        return list;
    }
}

// PRODUCTION ::= IDENTIFIER "::=" EXPRESSION
ProductionNode Production() :
{
    IdentifierNode id;
    EbnfNode expression;
}
{
    id = Identifier()
    <COLCOLEQ>
    expression = Expression()
    {
        return new ProductionNode(id, expression);
    }
}

// EXPRESSION ::= TERM ( "|" TERM )*
EbnfNode Expression() :
{
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
}
{
    n = Term()
    {
        list.add(n);
    }
    (
        <BAR>
        n = Term()
        {
            list.add(n);
        }
    )*
    {
        if (list.size() == 1) {
            return list.get(0);
        } else {
            return new AlternateNode(list);
        }
    }
}

// TERM       ::= FACTOR +
EbnfNode Term() :
{
    EbnfNode n;
    List<EbnfNode> list = new ArrayList<EbnfNode>();
}
{
    (
        LOOKAHEAD(
            Factor(),
            { !(getToken(1).kind == IDENTIFIER && getToken(2).kind == COLCOLEQ) } )
        n = Factor()
        {
            list.add(n);
        }
    )*
    {
        switch (list.size()) {
        case 0:
            return new EmptyNode();
        case 1:
            return list.get(0);
        default:
            return new SequenceNode(list);
        }
    }
}

// FACTOR       ::= FACTOR2 "+" ?
EbnfNode Factor() :
{
    EbnfNode n;
}
{
    n = Factor2()
    (
        <PLUS>
        {
            n = new MandatoryRepeatNode(n);
        }
    )?
    {
        return n;
    }
}

// FACTOR2  ::= FACTOR3
//            | FACTOR3 "*"
//            | FACTOR3 "?"
EbnfNode Factor2() :
{
    EbnfNode n;
}
{
    n = Factor3()
    (
        <ASTERISK>
        {
            n = new RepeatNode(n);
        }
    |
        <HOOK>
        {
            n = new OptionNode(n);
        }
    )?
    {
        return n;
    }
}

// FACTOR3  ::= IDENTIFIER
//            | LITERAL
//            | "(" EXPRESSION ")"
EbnfNode Factor3() :
{
    EbnfNode n;
}
{
    (
        n = Identifier()
    |
        n = Literal()
    |
        <LPAREN>
        n = Expression()
        <RPAREN>
    )
    {
        return n;
    }
}

// IDENTIFIER ::= <letter>+
IdentifierNode Identifier() :
{
    String s;
}
{
    s = <IDENTIFIER>.image
    {
        return new IdentifierNode(s);
    }
|
    s = <BRACKETED_IDENTIFIER>.image
    {
        String stripped = s.substring(1, s.length() - 1);
        return new IdentifierNode(stripped);
    }
}

// LITERAL    = """" character+ """"
LiteralNode Literal() :
{
    String s;
}
{
    s = <LITERAL>.image
    {
        assert s.startsWith("\"") && s.endsWith("\"") : s;
        return new LiteralNode(s.substring(1, s.length() - 1));
    }
}

TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |
    < #LETTER:
    [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
    ]
    >
    |
    < #DIGIT:
    [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
    ]
    >
}

TOKEN :
{
    < LPAREN: "(">
    | < RPAREN: ")">
    | < HOOK: "?" >
    | < PLUS: "+" >
    | < ASTERISK: "*" >
    | < COLCOLEQ: "::=" >
    | < BAR: "|" >
    | < QUOT: "\"" >
    | < BRACKETED_IDENTIFIER: "<" (<LETTER>|<DIGIT>/*|[" ", "_"]*/)+ ">" >
    | < LITERAL: <QUOT> ((<QUOT> <QUOT>) | (~["\""]))* <QUOT> >
}

// do not skip line endings: they terminate rules
SKIP :
{
    " "
    | "\t"
    | "\f"
    | "\r"
    | "\n"
}

/* COMMENTS */

MORE :
{
    "//" : IN_SINGLE_LINE_COMMENT
    |
    "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
    < ~[] >
}

// End BnfParser.jj
